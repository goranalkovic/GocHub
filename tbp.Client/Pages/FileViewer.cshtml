@page "/viewfile/{ItemId:int}"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@using System.Diagnostics
@using System.Text
@using Newtonsoft.Json
@using tbp.Shared.Models
@implements IDisposable

<style>
    .divided {
        display: grid;
        grid-template-columns: 1fr 20rem;
        grid-column-gap: 1rem;
    }
</style>

<div class="divided mt-3">


    <div class="container-fluid">
        <FileSelect ref="fileSelect"/>

        @if (repo != null && doc != null)
        {
            <h4 class="mb-0 mt-0">@repo.Name</h4>
            <small>@repo.Description</small>

            var newPath = doc.Path == "/" ? "/" : doc.Path + "/";

            <h6 class="text-muted mt-3">@repo.Name@newPath@doc.FileName</h6>

            <div class="d-flex my-4">
                <button type="button" class="btn btn-outline-secondary" onclick="@(async () => { await Helpers.UpOneLevel(); })">
                    <FabricIcon Glyph="Back" /> <span>Back</span>
                </button>
                
                <button class="btn btn-outline-success mx-3" type="button" onclick="@ReplaceFile">
                    <FabricIcon Glyph="BranchCommit"/> <span class="align-top">Commit new version</span>
                </button>

                @if (doc.FileType != null && doc.FileType != "svg" && doc.FileType != "folder" && !MonacoEditor.IsImage(doc.FileType))
                {
                <button class="btn btn-outline-info mr-3" type="button"y onclick="@SaveChanges">
                    <FabricIcon Glyph="Save"/> <span class="align-top">Commit editor changes</span>
                </button>
                }
                
                <small class="ml-auto my-auto align-middle">
                    <em>Last modified @Helpers.ToRelativeDate(doc.SysStartTime)</em>
                </small>
            </div>
        }

        @if (doc == null)
        {
            <p>
                <Spinner/>
            </p>
        }
        else if (MonacoEditor.IsImage(doc.FileType))
        {
            if (doc.FileType == "svg")
            {
                <img src="data:image/svg+xml;base64, @doc.Contents" alt="@doc.FileName" class="img-thumbnail" style="max-height: 300px"/>
            }
            else
            {
                <img src="data:image/@doc.FileType;base64, @doc.Contents" alt="@doc.FileName" class="img-thumbnail" style="max-height: 300px"/>
            }
        }
        else
        {
            <div id="@editorId" style="height: 600px; width: 900px" class="shadow-sm">
            </div>
        }

    </div>
    <div class="container-fluid">

        @if (doc != null)
        {
            <h6 class="text-primary">
                <FabricIcon Glyph="BranchCompare"/> <span class="align-top">All commits</span>
            </h6>

            if (docHistory == null)
            {
                <Spinner/>
            }
            else if (docHistory.Count == 0)
            {
                <em>No commits yet</em>
            }
            else
            {
                <div class="list-group" style="height: 30rem; overflow-y: scroll;">

                    @foreach (var historyItem in docHistory)
                    {
                        //var docPrev = await Http.PostJsonAsync<Document>($"api/Document/prev/{doc.Id}", historyItem.SysEndTime);

                        <a class="list-group-item list-group-item-action p-2 px-3" href="/viewdiff/@doc.Id/@docHistory.IndexOf(historyItem)"><small>From @Helpers.ToRelativeDate(historyItem.SysEndTime.ToLocalTime())</small></a>
                    }
                </div>
            }
        }
    </div>
</div>


@functions {
    string editorId = "editor-single";

    Document doc;
    Document docPrev;
    List<Document> docHistory;
    bool hasEditor;
    Repository repo;


    [Parameter]
    private int ItemId { get; set; }

    FileSelect fileSelect;

    private async void SaveChanges()
    {
        var newData = await MonacoEditor.GetData(editorId);

        await Http.PutJsonAsync($"api/Document/{ItemId}", (object) new Document
        {
            Id = doc.Id,
            FileType = doc.FileType,
            FileName = doc.FileName,
            Path = doc.Path,
            Contents = newData,
            RepoId = doc.RepoId
        });

        LoadData();

        StateHasChanged();
    }

    private async void LoadData()
    {

        doc = await Http.GetJsonAsync<Document>($"api/Document/{ItemId}");
        docHistory = await Http.GetJsonAsync<List<Document>>($"api/Document/history/{ItemId}");
        docHistory = docHistory.Take(docHistory.Count - 1).ToList();
        repo = await Http.GetJsonAsync<Repository>($"api/Repository/{doc.RepoId}");

        StateHasChanged();

    }

    protected override async Task OnAfterRenderAsync()
    {
        if (doc == null)
        {
            LoadData();
        }

        if (!hasEditor && doc != null && !MonacoEditor.IsImage(doc.FileType))
        {
            await MonacoEditor.CreateEditor(editorId, doc.FileType, Encoding.UTF8.GetString(Convert.FromBase64String(doc.Contents)));
            hasEditor = true;
        }
    }

    public void Dispose()
    {
        MonacoEditor.RemoveEditor(editorId);
    }

    private void ReplaceFile()
    {
        fileSelect.SelectFiles(async (selectedFiles) =>
        {
            var file = selectedFiles.First();

            using (var fileReader = fileSelect.GetFileReader(file))
            {
                var fileContent = await fileReader.GetFileBytesAsync();

                await Http.PutJsonAsync($"api/Document/{doc.Id}", (Object) new Document
                {
                    FileType = doc.FileType,
                    Id = doc.Id,
                    FileName = doc.FileName,
                    Path = doc.Path,
                    RepoId = doc.RepoId,
                    Contents = Convert.ToBase64String(fileContent)
                });

                LoadData();

                StateHasChanged();
            }
        });
    }

}