@page "/"
@using tbp.Shared.Models
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper


<div class="container">

    @if (LoggedInUser == null)
    {
        <Spinner/>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center">
            <h4>@LoggedInUser.Username's repositories</h4>

            @if (repos != null && repos.Count >= 1)
            {
                <a class="btn btn-outline-success" href="/newrepo">New repository</a>
            }
        </div>
        <br/>

        if (repos == null)
        {
            <Spinner/>
        }
        else if (repos.Count < 1)
        {
            <div class="text-center">
                <h1>
                    <FabricIcon Glyph="BorderDot"/>
                </h1>
                <i>So empty in here...</i>
                <br/>
                <a class="btn btn-outline-primary mt-5" href="/newrepo">New repository</a>
            </div>
        }
        else
        {
            <ul class="list-group">

                @foreach (var repo in repos)
                {
                    <li class="list-group-item align-items-center py-2">
                        <a href="viewrepo/@repo.Id/root">@repo.Name</a> <br/>
                        <small class="mt-1">@repo.Description</small>
                    </li>
                }
            </ul>
        }
    }

</div>

@functions
{

    List<Repository> repos;

    User LoggedInUser { get; set; }


    protected override void OnInit()
    {
        LoadUserData();

        MonacoEditor.LastPage = "/";
    }

    private async void LoadUserData()
    {
        var cookie = await CookieManager.GetData("currentUser");
        cookie = cookie == "" ? "-1" : cookie;
        LoggedInUser = await Http.GetJsonAsync<User>($"api/User/{cookie}");

        StateHasChanged();

        LoadRepos();
    }

    public async void LoadRepos()
    {
        repos = await Http.GetJsonAsync<List<Repository>>($"api/Repository/by/{LoggedInUser.Id}");
        StateHasChanged();
    }

}